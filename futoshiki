/*
 * main.c
 *
 *  Created on: May 24, 2018
 *      Author: sheida
 */

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define N 5
typedef struct cell {

	int key;
	char up;
	char left;
	char rowFlag;
	char colFlag;
} cell_t;

cell_t **readF(char *, int *, int *, int *);
int check_relation(cell_t **,int,int);
int solve(cell_t **,int , int);
void print_solution(cell_t **,int );

int main(int argc, char *argv[]) {

	cell_t **mat;
	int n, i, complete, valid;

	mat = readF(argv[1], &n, &complete, &valid);
	if (complete) {
		printf("completed Scheme\n");
		if (valid) {
			printf("valid Solution!\n");
			valid=solve(mat, n, 0);
			print_solution(mat, n);
		} else {
			printf("Invalid Solution!");

		}
	} else {
		printf("incompleted!");
	}
	//free the mat
	for (i = 0; i < n; i++) {
		free(mat[i]);
	}
	free(mat);
	return 0;
}

cell_t **readF(char *fileName, int *dim, int *complete, int *valid) {

	FILE *fp;
	cell_t **mat;
	int i, j, val, n;
	char vector[10];

	fp = fopen(fileName, "r");
	if (fp == NULL) {
		printf("error on opening file\n");
		exit(EXIT_FAILURE);
	}
	fscanf(fp, "%d", &n);

	mat = (cell_t **) malloc(n * sizeof(cell_t *));
	if (mat == NULL) {
		printf("Allocation Error!\n");
		exit(0);
	}
	for (i = 0; i < n; i++) {
		mat[i] = (cell_t *) malloc(n * sizeof(cell_t));
		if (mat[i] == NULL) {
			printf("Allocation error!\n");
			exit(0);

		}
		for (j = 0; j < n; j++) {
			mat[i][j].key = 0;
			mat[i][j].left = '|';
			mat[i][j].up = '-';
			mat[i][j].rowFlag = 0;
			mat[i][j].colFlag = 0;
		}
	}
	*dim = n;
	*complete = 1;
	*valid = 1;

	for (i = 0; i < n; i++) {
		//for all rows first one read "up" relationship
		if (i > 0) {
			for (j = 0; j < n; j++) {
				fscanf(fp, "%s", vector);
				mat[i][j].up = vector[0];
				if (j < n - 1) {
					fscanf(fp, "%*s");
				}
			}
		}

		//for all rows read values and "left" relationShip
		for (j = 0; j < n; j++) {
			if (j > 0) {
				//for(i=0;i<N;i++){
				fscanf(fp, "%s", vector);
				mat[i][j].left = vector[0];
			}
			fscanf(fp, "%d", &val);
			mat[i][j].key = val;
			if (val == 0) {
				*complete = 0;

			} else if (val < 0 || val > n) {
				*valid = 0;
			} else {
				if (mat[i][val - 1].rowFlag++) {
					*valid = 0;
				}
				if (mat[val - 1][j].colFlag++) {
					*valid = 0;
				}
				if (check_relation(mat, i, j) == 0) {
					*valid = 0;
				}
			}

		}
	}

	fclose(fp);
	return mat;

}
int check_relation(cell_t ** mat,int i,int j){

	int val=mat[i][j].key;
	char sign;
	if(j>0 && mat[i][j-1].key!=0){
		sign=mat[i][j].left;
		if(sign=='<' && mat[i][j-1].key>val){
			return 0;
		}
		if(sign=='>' && mat[i][j-1].key < val){
			return 0;
		}

	}
	if(i>0 && mat[i-1][j].key !=0){
		sign=mat[i][j].up;
		if(sign=='^' && mat[i-1][j].key > val){
			return 0;
		}
		if(sign=='v' && mat[i-1][j].key <val){
			return 0;
		}
	}

return 1;

}

int solve(cell_t **mat,int n,int level){

	int i,j,k;
	int rowMark,colMark;

	if(level==n*n){
		return 1;
	}
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){
			if(mat[i][j].key!=0){
				if(check_relation(mat,i,j)){
					return solve(mat,n,level+1);
				}else
					return 0;
				for(k=0;k<=n;k++){
					mat[i][j].key=k;
					rowMark=mat[i][k-1].rowFlag++;
					colMark=mat[i][k-1].colFlag++;
					if(rowMark ==0 && colMark ==0 && check_relation(mat,i,j)==1){
						if(solve(mat,n,level+1)){
							return 1;
						}
					}
					mat[i][j].key=0;
					mat[i][j].rowFlag--;
					mat[i][j].colFlag--;
				}
			}
		}
	}
	return 0;
}

void print_solution(cell_t **mat, int n){

	int i,j;
	for(i=0;i<n;i++){
		if(i>0){
			for(j=0;j<n;j++){
						//print
				printf("%c",mat[i][j].up);
				if(j<n-1){
					//print
					printf("-");
				}
					}
			printf("\n");


		}
		for(j=0;j<n;j++){
			if(j>0){
				printf("%c",mat[i][j].left);
			}
			printf("%d",mat[i][j].key);
		}

		printf("\n");
	}
}
